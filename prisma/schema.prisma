// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model: Stores user information.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  hashedPassword  String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
}

// Account model: Required by NextAuth for linking social accounts.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model: Required by NextAuth for session management.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model: Required by NextAuth for email verification.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Post model: Represents a post in the community feed.
model Post {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imageUrl  String? // Optional image for the post

  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes     Like[]
}

// Comment model: Represents a comment on a post.
model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())

  authorId  String
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId    String
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Like model: Represents a user's like on a post.
model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // A user can only like a post once
}