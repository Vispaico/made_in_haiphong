// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  hashedPassword  String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  listings        Listing[]
  savedPosts      SavedPost[]
  savedListings   SavedListing[]
  conversations   Conversation[] @relation("participants")
  sentMessages    Message[]      @relation("sender")
}

// Account model (unchanged)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

// Session model (unchanged)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model (unchanged)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// Post model
model Post {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  imageUrls String[]
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]

  // THE FIX: Add relation to the new saved item model
  savedBy   SavedPost[]
}

// Comment model (unchanged)
model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Like model (unchanged)
model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([userId, postId])
}

// Listing model
model Listing {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  imageUrls   String[]
  category    String
  price       Float
  maxGuests   Int?
  bedrooms    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // THE FIX: Add relation to the new saved item model
  savedBy     SavedListing[]
}

// --- NEW MODELS FOR SAVED ITEMS ---

// Connects a User to a saved Post
model SavedPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([userId, postId])
}

// Connects a User to a saved Listing
model SavedListing {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId   String
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  @@unique([userId, listingId])
}

// Represents a conversation between two or more users
model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  
  // A conversation can have many messages
  messages     Message[]

  // A conversation has many participants (users)
  participants User[]    @relation("participants")
}

// Represents a single message within a conversation
model Message {
  id             String       @id @default(cuid())
  body           String       @db.Text
  createdAt      DateTime     @default(now())
  
  // The user who sent the message
  senderId       String
  sender         User         @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)

  // The conversation this message belongs to
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}