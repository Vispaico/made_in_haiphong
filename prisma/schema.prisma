// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum CategoryType {
  EXPLORE
  MARKETPLACE
}

enum SubscriptionStatus {
  FREE
  PREMIUM
}

enum ActivityType {
  NEW_BOOKING_REQUEST
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  NEW_COMMENT
}

// --- MODELS ---

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String?            @unique
  hashedPassword     String?
  emailVerified      DateTime?
  image              String?
  isAdmin            Boolean            @default(false)
  subscriptionStatus SubscriptionStatus @default(FREE)
  
  accounts           Account[]
  sessions           Session[]
  posts              Post[]
  comments           Comment[]
  likes              Like[]
  listings           Listing[]
  savedPosts         SavedPost[]
  savedListings      SavedListing[]
  conversations      Conversation[]     @relation("participants")
  sentMessages       Message[]          @relation("sender")
  bookings           Booking[]

  // THE FIX: These relations are now correctly added to the single User model
  activities         Activity[]
  initiatedActivities Activity[] @relation("InitiatedActivities")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Post {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  imageUrls String[]
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  savedBy   SavedPost[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([userId, postId])
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  imageUrls   String[]
  category    String
  price       Float
  maxGuests   Int?
  bedrooms    Int?
  latitude    Float?
  longitude   Float?
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  savedBy     SavedListing[]
  bookings    Booking[]
}

model SavedPost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([userId, postId])
}

model SavedListing {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId   String
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  @@unique([userId, listingId])
}

model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  messages     Message[]
  participants User[]    @relation("participants")
}

model Message {
  id             String       @id @default(cuid())
  body           String       @db.Text
  createdAt      DateTime     @default(now())
  senderId       String
  sender         User         @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Booking {
  id          String        @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId   String
  listing     Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Category {
  id        String       @id @default(cuid())
  name      String
  slug      String       @unique
  type      CategoryType
  createdAt DateTime     @default(now())
}

model ExploreEntry {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  body        String   @db.Text
  imageUrls   String[]
  category    String
  address     String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Announcement {
  id        String   @id @default(cuid())
  message   String   @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  createdAt   DateTime     @default(now())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  initiatorId String?
  initiator   User?        @relation("InitiatedActivities", fields: [initiatorId], references: [id], onDelete: SetNull)
  link        String?
}